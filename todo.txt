
	* should all actionable names have a name field that can be directly accessed, particularily for
	  being able to find an object by name when used in a command?
	* what will be stored in the properties list?  all strings?  all objects?  a special struct maintained
	  by actionable itself?
	* for performing a "look" command, do you have to be able to determine that an object is a "mobile"
	  C class in order to list it as a person in the room?  Can this info be found out through the
	  actionable (game object) type information?
	* should you implement an object id system to make it easier to refer to objects in the data files?

	* finish implementing the container_find() function
	* figure out how all data will be loaded and from where
	* we need a way to create game objects that are different in their actions but the same in their C
	  class
	* make user load data from a file

	* make a character creation game object thingie that telnet can call to generate your character
	* implement proper handling of telnet commands

	* make the login track invalid attempts and terminate the connection after a while
	* add a way to automatically timeout login attempts
	* accept a "-d" command line arg and fork to a daemon process
	* make the login object use multiple methods of authentication (primarily for other interfaces)

	* make it easy (through data.c) to have multiple "data modules" (only needed for maps and stuff)
	* make it possible for the command prompt to display info (call a function to generate it)

Structural Issues:

	* should object types have some kind of "parent type" pointer so that code can look up to make sure
	  an object is castable to a parent type? or can you always assume that a given object is castable to
	  one of it's superclasses?

	* is the way we call the callbacks in sdm_interface_select right in that we call each callback
	  once *for each condition* so the same function is called with the same interface for each
	  condition that it's registered for.  How does the callback tell the difference?  should there
	  really be 3 callbacks?  Or should you only be able to handle one condition? or should the callback
	  only be called once and it's up to the handling routine to check each descriptor to see which one
	  is ready?  Isn't there a function called poll that can be used instead of select in those situations?

Features:

	* an irc server interface (such that you enter a channel #world or something and the server
	  sends output for the room you are currently in and people that enter the room will be be displayed
	  as join/leaves).  You could also enter multiple channels in a way where only the #world channel is
	  the game and the other channels are special "game" areas for chat only (normally accessable by
	  a special teleport command or something)
	* an irc client interface that is an irc bot that you pm through your irc client with to play the game.
	* an ssh interface

