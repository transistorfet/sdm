
	* remove the calls to on_exit and on_enter from the thing_add and thing_remove functions and make
	  them be called manually
	* implement binary tree
	* convert actions to use the binary tree and do partial lookups

	* make functions for the various possible do_action functions and possibly make do_action itself
	  take the args struct and have static inline functions that make that call nice
	* make a list object type that can be used as a property
	* make sdm_interpreter_find_thing() use the aliases of an object for matching as well as doing partial
	  matching of the string given.
	* implement a permissions system for object modification
	* make the interpreter have an "evaluate" function that can be called with a const str to evaluate
	  a command directly without being part of a process call 
	* add command shortcuts like lambdamoo's \" for say and : for emote
	* make a system so that arguments can be preprocessed for an action (?)

	* have the telnet module more closely control the printing of the command prompt such that after
	  output has been generated, a command prompt in printed (will be hard to know when output is over).
	  You could have a special check in the main server loop that checks a flag set when output has been
	  sent and if output was sent, print the command prompt?? (complex and lots of border cases)
	* can you make object lookup in the interpreter try to match the whole command line and whatever
	  matches the best is used as the object name and the rest is passed as the args string?
	* we'll have to add reference counting of objects at some point

	* make the "examine" (rename to look_self?) action tailor the description to the type of object it
	  is describing (ie. don't list the items a person is carrying)
	* how do you decide what things to print in the list of contents since you don't want to print all
	  objects such as exits and stuff (perhaps by calling a function on the object that makes it describe
	  itself)
	* make functions for setting the name and description of an object
	* add actions for manipulating things: get, give, drop, inventory, etc
	* convert all hardcoded id references to named references (such as the starting room in user and form)
	* make an "exits" command that prints the list of obvious exits and their descriptions
	* print the equipment, weapons, armour, etc seperately and/or provide commands that print only
	  one type
	* you need a way to get the direction from which a user has arrived or left a room.

	* should you make the announce action add a "\n" before each output to the user in order to prevent
	  interrupting the current line being typed instead of putting it in all the places that generate
	  output sent to the announce action?
	* should you add a flag to objects somewhere that specifies that the object should be written to a
	  seperate file (sdm_user) for checking when writing a container instead of a hardcoded check for user?
	* make the lua error print to the user (or at least optionally)
	* you *HAVE* to make this fucking lua stuff easier!
	* add is_user and is_mobile lua functions

	* have an etc/telnet.xml file with <server> entries to run servers and the data on what registration
	  restrictions and objects to use will be there
	* should the connect/disconnect functions call an action on the object to allow for extra stuff to
	  be done?

	* make various commands use the extra text passed in a command as a text modifier.  For example you
	  could say "give apple to trans carefully" and it will interpret the command like normal and the
	  'carefully' at the end would be tacked onto the output as "Wizard gives an apple to trans carefully"

	* write and implement details on converting input received (in the server core format document)
	* tidy up the xml formatting in telnet and add theme tags (tags that indirectly refer to format)
	* add the ability for telnet to read user specific configuration data from the user data file
	* implement proper handling of telnet commands
	* have a linked list of processors in the user object with a pointer to the currently active one
	  and read/write the processor's data to the user file.  There should be a function for code to select
	  or create a new processor in the user as well as remove one.  The "next" pointer wolud be in proce..

Refactoring:

	* should you not use the ARGS macros?
	* should "this" (thing) be in the action arguments struct or passed seperately like it is now?
	* make all types use init functions of the form "init_sdm_<name>_type" or else convert string and
	  number to *not* use that form

Structural Issues:

	* can/should there be a way of doing an overridden action? (knowingly passing an object to an action
	  on a parent of that object to avoid an overloaded action? (to change it's overt behaviour without
	  reimplementing the functionality) (eg. override the say command to prevent talking while asleep)
	* should you change format codes to something like bbcode ( [red] instead of <red> )

	* how do you get the thing to record information in when using a form?
	* how would you make different subselections in a form based on previous input (only ask a certain
	  question if the answer to a previous question was a certain answer)?
	* in lua, how do you tell if the result of an action is a number or a thing id?

	* is the way we call the callbacks in sdm_interface_select right in that we call each callback
	  once *for each condition* so the same function is called with the same interface for each
	  condition that it's registered for.  How does the callback tell the difference?  should there
	  really be 3 callbacks?  Or should you only be able to handle one condition? or should the callback
	  only be called once and it's up to the handling routine to check each descriptor to see which one
	  is ready?  Isn't there a function called poll that can be used instead of select in those situations?

    Output Formatting/Interfaces:
	* how will the "\n before line instead of after" affect telnet vs IRC?  Would this need to be somehow
	  abstracted so that it happens automatically yet is usable by both systems?
	* There is a need in the future to change the method of sending data to the interface other than just
	  colour formatting if we want to have an interactive system like a curses interface (much like using
	  vim on a telnet session).  The code for this would be in a processor subclass most likely inheriting
	  from sdm_interpreter.  This code (and the code of the processor objects) should almost be considered
	  like an actual system process of sorts almost like a client program running server-side.  In fact
	  through a special comptely independant process, this system could be achieved as if the client was
	  sshing to the server and running a local client program that connected to the moo server except it
	  would use the moo user database to authenticate the ssh session and would restrict the session to
	  only using that client program.  The system could instead send output formatted with xml to various
	  virtual functions associated with an I/O processor which works closely with an interface to render
	  that output on the client's machine.  We can modify the system at a later date to use these
	  different interfaces since I cannot accurately predict what will be require at this time.
	* modify interface read/write commands such that seperate channels of text can be supported in a
	  way that the interface receives the data seperately and must render it accordingly (?? this is
	  in order to support an IRC server interface where you have various seperate channels and then a
	  #world channel or something in which you interact but it gets very complicated, especially with
	  things like emote/me which would be rendered differently on telnet vs IRC and therefore rendering
	  of the command would ideally have to be passed to the interface which starts a slippery slide of
	  what gets handled by the interface).
	* think about the processor system.  it might be good to seperate it such that if a raw xml client
	  was developed, it should be able to communicate directly with the code that handles telnet clients
	  directly ontop of the code that accepts the xml client essentially

Gerenal:

	* make the login track invalid attempts and terminate the connection after a while
	* add a way to automatically timeout login attempts
	* make the login object use/store multiple methods of authentication (primarily for other interfaces)

	* make build.pl only use the cflags for certain modules as needed instead of all modules being
	  compiled with the flags for all embedded languages for example
	* make it easy (through data.c) to have multiple "data modules" (only needed for maps and stuff)
	* make it possible for the command prompt to display info (call a function to generate it)

	* add a release function to SDRL to release the expr when the sdrl action object is destroyed
	* make a proper (if ) and any other handy forms to make it easy to program
	* make a sdrl unparser (perhaps as part of SDRL itself)
	* make functions for controlling the properties of sdm_things
	* make functions for moving objects between containers

Features:

	* multiple scripting languages: sdrl, lua
	* multiserver somehow (loadbalancing) (perhaps using xml-rpc or something)
	* an irc server interface (such that you enter a channel #world or something and the server
	  sends output for the room you are currently in and people that enter the room will be be displayed
	  as join/leaves).  You could also enter multiple channels in a way where only the #world channel is
	  the game and the other channels are special "game" areas for chat only (normally accessable by
	  a special teleport command or something)
	* a super client extension thingie that is just a special xml command to the client to play a certain
	  piece of music that the client can optionally download through some other protocol
	* interactive interface (ncurses) through telnet as a mini-client (or should this complexity always
	  be offloaded to the clients to boost server-side performance?)
	* an irc client interface that is an irc bot that you pm through your irc client with to play the game.
	* an ssh interface

